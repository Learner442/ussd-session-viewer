-- Create tables for the Sales Agent Module

-- Table for tracking recruited users by agents
CREATE TABLE public.agent_recruited_users (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  agent_id UUID NOT NULL REFERENCES public.agents(id),
  user_phone VARCHAR NOT NULL,
  user_type VARCHAR NOT NULL CHECK (user_type IN ('citizen', 'merchant', 'agent')),
  registration_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  is_active BOOLEAN DEFAULT true,
  last_activity_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Table for tracking sessions generated by recruited users
CREATE TABLE public.agent_user_sessions (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  agent_id UUID NOT NULL REFERENCES public.agents(id),
  recruited_user_id UUID NOT NULL REFERENCES public.agent_recruited_users(id),
  session_type VARCHAR NOT NULL,
  session_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  is_completed BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Table for tracking transactions by recruited users
CREATE TABLE public.agent_user_transactions (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  agent_id UUID NOT NULL REFERENCES public.agents(id),
  recruited_user_id UUID NOT NULL REFERENCES public.agent_recruited_users(id),
  transaction_amount DECIMAL(10,2) NOT NULL,
  transaction_type VARCHAR NOT NULL,
  transaction_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  revenue_generated DECIMAL(10,2) DEFAULT 0.00,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Table for tracking SMS sent by recruited users
CREATE TABLE public.agent_user_sms (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  agent_id UUID NOT NULL REFERENCES public.agents(id),
  recruited_user_id UUID NOT NULL REFERENCES public.agent_recruited_users(id),
  sms_count INTEGER NOT NULL DEFAULT 1,
  sms_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Table for commission calculations and payments
CREATE TABLE public.agent_commissions (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  agent_id UUID NOT NULL REFERENCES public.agents(id),
  calculation_period_start DATE NOT NULL,
  calculation_period_end DATE NOT NULL,
  active_users_count INTEGER DEFAULT 0,
  active_users_commission DECIMAL(10,2) DEFAULT 0.00,
  completed_sessions_count INTEGER DEFAULT 0,
  sessions_commission DECIMAL(10,2) DEFAULT 0.00,
  sms_count INTEGER DEFAULT 0,
  sms_commission DECIMAL(10,2) DEFAULT 0.00,
  transaction_bonuses_count INTEGER DEFAULT 0,
  transaction_bonuses_amount DECIMAL(10,2) DEFAULT 0.00,
  total_commission DECIMAL(10,2) DEFAULT 0.00,
  is_paid BOOLEAN DEFAULT false,
  paid_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Table for commission rules configuration
CREATE TABLE public.commission_rules (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  rule_name VARCHAR NOT NULL,
  rule_type VARCHAR NOT NULL CHECK (rule_type IN ('per_active_user', 'per_session', 'per_sms', 'transaction_bonus')),
  rate DECIMAL(10,4) NOT NULL,
  bonus_threshold INTEGER DEFAULT NULL,
  bonus_amount DECIMAL(10,2) DEFAULT NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable RLS on all tables
ALTER TABLE public.agent_recruited_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_user_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_user_sms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_commissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.commission_rules ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Anyone can view agent recruited users" ON public.agent_recruited_users FOR SELECT USING (true);
CREATE POLICY "Anyone can manage agent recruited users" ON public.agent_recruited_users FOR ALL USING (true);

CREATE POLICY "Anyone can view agent user sessions" ON public.agent_user_sessions FOR SELECT USING (true);
CREATE POLICY "Anyone can manage agent user sessions" ON public.agent_user_sessions FOR ALL USING (true);

CREATE POLICY "Anyone can view agent user transactions" ON public.agent_user_transactions FOR SELECT USING (true);
CREATE POLICY "Anyone can manage agent user transactions" ON public.agent_user_transactions FOR ALL USING (true);

CREATE POLICY "Anyone can view agent user sms" ON public.agent_user_sms FOR SELECT USING (true);
CREATE POLICY "Anyone can manage agent user sms" ON public.agent_user_sms FOR ALL USING (true);

CREATE POLICY "Anyone can view agent commissions" ON public.agent_commissions FOR SELECT USING (true);
CREATE POLICY "Anyone can manage agent commissions" ON public.agent_commissions FOR ALL USING (true);

CREATE POLICY "Anyone can view commission rules" ON public.commission_rules FOR SELECT USING (true);
CREATE POLICY "Anyone can manage commission rules" ON public.commission_rules FOR ALL USING (true);

-- Add indexes for better performance
CREATE INDEX idx_agent_recruited_users_agent_id ON public.agent_recruited_users(agent_id);
CREATE INDEX idx_agent_recruited_users_registration_date ON public.agent_recruited_users(registration_date);
CREATE INDEX idx_agent_user_sessions_agent_id ON public.agent_user_sessions(agent_id);
CREATE INDEX idx_agent_user_sessions_session_date ON public.agent_user_sessions(session_date);
CREATE INDEX idx_agent_user_transactions_agent_id ON public.agent_user_transactions(agent_id);
CREATE INDEX idx_agent_user_transactions_transaction_date ON public.agent_user_transactions(transaction_date);
CREATE INDEX idx_agent_user_sms_agent_id ON public.agent_user_sms(agent_id);
CREATE INDEX idx_agent_commissions_agent_id ON public.agent_commissions(agent_id);

-- Create trigger for updating commission updated_at
CREATE TRIGGER update_agent_commissions_updated_at
  BEFORE UPDATE ON public.agent_commissions
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_commission_rules_updated_at
  BEFORE UPDATE ON public.commission_rules
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Insert default commission rules
INSERT INTO public.commission_rules (rule_name, rule_type, rate, bonus_threshold, bonus_amount) VALUES
('Active User Commission', 'per_active_user', 0.2000, NULL, NULL),
('Session Commission', 'per_session', 0.0100, NULL, NULL),
('SMS Commission', 'per_sms', 0.0050, NULL, NULL),
('Transaction Bonus', 'transaction_bonus', 0.0000, 500, 10.00);