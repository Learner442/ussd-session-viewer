import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { UserPlus, Edit, Trash2, Filter, Crown, Users, DollarSign, Target } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface SalesAgent {
  id: string;
  sales_agent_id: string;
  agent_name: string;
  phone_number: string;
  email?: string;
  region: string;
  department: string;
  role: string;
  status: string;
  initial_budget: number;
  commission_rate: number;
  target_quota: number;
  created_at: string;
  updated_at: string;
  supervised_agents_count?: number;
}

interface NewSalesAgentForm {
  agent_name: string;
  phone_number: string;
  email: string;
  region: string;
  department: string;
  initial_budget: number;
  commission_rate: number;
  target_quota: number;
}

export const SalesAgentManagement = () => {
  const { toast } = useToast();
  const [salesAgents, setSalesAgents] = useState<SalesAgent[]>([]);
  const [filteredSalesAgents, setFilteredSalesAgents] = useState<SalesAgent[]>([]);
  const [loading, setLoading] = useState(true);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedSalesAgent, setSelectedSalesAgent] = useState<SalesAgent | null>(null);
  const [filters, setFilters] = useState({
    region: 'all',
    status: 'all',
    department: 'all'
  });

  const [newSalesAgentForm, setNewSalesAgentForm] = useState<NewSalesAgentForm>({
    agent_name: '',
    phone_number: '',
    email: '',
    region: '',
    department: 'Sales',
    initial_budget: 50000,
    commission_rate: 0.05,
    target_quota: 100000
  });

  useEffect(() => {
    loadSalesAgents();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [salesAgents, filters]);

  const loadSalesAgents = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('sales_agents')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;

      // Load supervised agents count for each sales agent
      const salesAgentsWithCounts = await Promise.all(
        (data || []).map(async (salesAgent) => {
          const { data: supervisedAgents } = await supabase
            .from('agents')
            .select('id')
            .eq('sales_agent_id', salesAgent.id);

          return {
            ...salesAgent,
            supervised_agents_count: supervisedAgents?.length || 0
          };
        })
      );

      setSalesAgents(salesAgentsWithCounts);
    } catch (error) {
      console.error('Error loading sales agents:', error);
      toast({
        title: "Error loading sales agents",
        description: "Failed to load sales agents data.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const applyFilters = () => {
    let filtered = [...salesAgents];

    if (filters.region !== 'all') {
      filtered = filtered.filter(agent => agent.region === filters.region);
    }

    if (filters.status !== 'all') {
      filtered = filtered.filter(agent => agent.status === filters.status);
    }

    if (filters.department !== 'all') {
      filtered = filtered.filter(agent => agent.department === filters.department);
    }

    setFilteredSalesAgents(filtered);
  };

  const addSalesAgent = async () => {
    try {
      const { error } = await supabase
        .from('sales_agents')
        .insert({
          sales_agent_id: '', // Will be auto-generated by trigger
          agent_name: newSalesAgentForm.agent_name,
          phone_number: newSalesAgentForm.phone_number,
          email: newSalesAgentForm.email,
          region: newSalesAgentForm.region,
          department: newSalesAgentForm.department,
          initial_budget: newSalesAgentForm.initial_budget,
          commission_rate: newSalesAgentForm.commission_rate,
          target_quota: newSalesAgentForm.target_quota,
          status: 'active' as const
        });

      if (error) throw error;

      toast({
        title: "Sales Agent added successfully",
        description: `${newSalesAgentForm.agent_name} has been added as a new sales agent.`,
      });

      setIsAddDialogOpen(false);
      setNewSalesAgentForm({
        agent_name: '',
        phone_number: '',
        email: '',
        region: '',
        department: 'Sales',
        initial_budget: 50000,
        commission_rate: 0.05,
        target_quota: 100000
      });
      loadSalesAgents();
    } catch (error) {
      console.error('Error adding sales agent:', error);
      toast({
        title: "Error adding sales agent",
        description: "Failed to add new sales agent.",
        variant: "destructive"
      });
    }
  };

  const updateSalesAgent = async () => {
    if (!selectedSalesAgent) return;

    try {
      const { error } = await supabase
        .from('sales_agents')
        .update({
          agent_name: selectedSalesAgent.agent_name,
          phone_number: selectedSalesAgent.phone_number,
          email: selectedSalesAgent.email,
          region: selectedSalesAgent.region,
          department: selectedSalesAgent.department,
          commission_rate: selectedSalesAgent.commission_rate,
          target_quota: selectedSalesAgent.target_quota,
          status: selectedSalesAgent.status as "pending" | "active" | "suspended" | "inactive"
        })
        .eq('id', selectedSalesAgent.id);

      if (error) throw error;

      toast({
        title: "Sales Agent updated successfully",
        description: `${selectedSalesAgent.agent_name}'s information has been updated.`,
      });

      setIsEditDialogOpen(false);
      setSelectedSalesAgent(null);
      loadSalesAgents();
    } catch (error) {
      console.error('Error updating sales agent:', error);
      toast({
        title: "Error updating sales agent",
        description: "Failed to update sales agent information.",
        variant: "destructive"
      });
    }
  };

  const deactivateSalesAgent = async (agentId: string, agentName: string) => {
    try {
      const { error } = await supabase
        .from('sales_agents')
        .update({ status: 'inactive' as const })
        .eq('id', agentId);

      if (error) throw error;

      toast({
        title: "Sales Agent deactivated",
        description: `${agentName} has been deactivated.`,
      });

      loadSalesAgents();
    } catch (error) {
      console.error('Error deactivating sales agent:', error);
      toast({
        title: "Error deactivating sales agent",
        description: "Failed to deactivate sales agent.",
        variant: "destructive"
      });
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      active: { label: 'Active', variant: 'default' as const },
      inactive: { label: 'Inactive', variant: 'secondary' as const },
      suspended: { label: 'Suspended', variant: 'destructive' as const },
      pending: { label: 'Pending', variant: 'outline' as const }
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;
    return <Badge variant={config.variant}>{config.label}</Badge>;
  };

  return (
    <div className="space-y-6">
      {/* Header Actions */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Crown className="h-6 w-6 text-yellow-600" />
            Sales Agent Management (Supervisors)
          </h2>
          <p className="text-muted-foreground">Manage sales agents who supervise regular agents</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <UserPlus className="h-4 w-4 mr-2" />
                Add New Sales Agent
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Add New Sales Agent (Supervisor)</DialogTitle>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">Agent Name</Label>
                    <Input
                      id="name"
                      value={newSalesAgentForm.agent_name}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, agent_name: e.target.value }))}
                      placeholder="John Doe"
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">Phone Number</Label>
                    <Input
                      id="phone"
                      value={newSalesAgentForm.phone_number}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, phone_number: e.target.value }))}
                      placeholder="+1234567890"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={newSalesAgentForm.email}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, email: e.target.value }))}
                      placeholder="john@example.com"
                    />
                  </div>
                  <div>
                    <Label htmlFor="region">Region</Label>
                    <Select value={newSalesAgentForm.region} onValueChange={(value) => setNewSalesAgentForm(prev => ({ ...prev, region: value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select region" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="goma">Goma</SelectItem>
                        <SelectItem value="kinshasa">Kinshasa</SelectItem>
                        <SelectItem value="bukavu">Bukavu</SelectItem>
                        <SelectItem value="urban">Urban Zones</SelectItem>
                        <SelectItem value="rural">Rural Zones</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="budget">Initial Budget ($)</Label>
                    <Input
                      id="budget"
                      type="number"
                      value={newSalesAgentForm.initial_budget}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, initial_budget: Number(e.target.value) }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="commission">Commission Rate (%)</Label>
                    <Input
                      id="commission"
                      type="number"
                      step="0.01"
                      max="1"
                      min="0"
                      value={newSalesAgentForm.commission_rate * 100}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, commission_rate: Number(e.target.value) / 100 }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="quota">Target Quota ($)</Label>
                    <Input
                      id="quota"
                      type="number"
                      value={newSalesAgentForm.target_quota}
                      onChange={(e) => setNewSalesAgentForm(prev => ({ ...prev, target_quota: Number(e.target.value) }))}
                    />
                  </div>
                </div>
              </div>
              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>
                <Button onClick={addSalesAgent}>Add Sales Agent</Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filter Sales Agents
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label>Region</Label>
              <Select value={filters.region} onValueChange={(value) => setFilters(prev => ({ ...prev, region: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Regions</SelectItem>
                  <SelectItem value="goma">Goma</SelectItem>
                  <SelectItem value="kinshasa">Kinshasa</SelectItem>
                  <SelectItem value="bukavu">Bukavu</SelectItem>
                  <SelectItem value="urban">Urban Zones</SelectItem>
                  <SelectItem value="rural">Rural Zones</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label>Status</Label>
              <Select value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="active">Active</SelectItem>
                  <SelectItem value="inactive">Inactive</SelectItem>
                  <SelectItem value="suspended">Suspended</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label>Department</Label>
              <Select value={filters.department} onValueChange={(value) => setFilters(prev => ({ ...prev, department: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Departments</SelectItem>
                  <SelectItem value="Sales">Sales</SelectItem>
                  <SelectItem value="Marketing">Marketing</SelectItem>
                  <SelectItem value="Operations">Operations</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Sales Agents Table */}
      <Card>
        <CardHeader>
          <CardTitle>Sales Agents ({filteredSalesAgents.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">Loading sales agents...</div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Agent ID</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Region</TableHead>
                  <TableHead>Department</TableHead>
                  <TableHead>Supervised Agents</TableHead>
                  <TableHead>Commission Rate</TableHead>
                  <TableHead>Target Quota</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredSalesAgents.map((agent) => (
                  <TableRow key={agent.id}>
                    <TableCell className="font-medium">{agent.sales_agent_id}</TableCell>
                    <TableCell>
                      <div>
                        <p className="font-medium">{agent.agent_name}</p>
                        <p className="text-sm text-muted-foreground">{agent.email}</p>
                      </div>
                    </TableCell>
                    <TableCell className="capitalize">{agent.region}</TableCell>
                    <TableCell>{agent.department}</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        {agent.supervised_agents_count}
                      </div>
                    </TableCell>
                    <TableCell>{(agent.commission_rate * 100).toFixed(2)}%</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Target className="h-4 w-4" />
                        ${agent.target_quota.toLocaleString()}
                      </div>
                    </TableCell>
                    <TableCell>{getStatusBadge(agent.status)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setSelectedSalesAgent(agent);
                            setIsEditDialogOpen(true);
                          }}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button variant="outline" size="sm">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Deactivate Sales Agent</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to deactivate {agent.agent_name}? This action can be reversed later.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction onClick={() => deactivateSalesAgent(agent.id, agent.agent_name)}>
                                Deactivate
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}

          {!loading && filteredSalesAgents.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              No sales agents found matching the current filters.
            </div>
          )}
        </CardContent>
      </Card>

      {/* Edit Sales Agent Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Edit Sales Agent Information</DialogTitle>
          </DialogHeader>
          {selectedSalesAgent && (
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-name">Agent Name</Label>
                  <Input
                    id="edit-name"
                    value={selectedSalesAgent.agent_name}
                    onChange={(e) => setSelectedSalesAgent(prev => prev ? { ...prev, agent_name: e.target.value } : null)}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-phone">Phone Number</Label>
                  <Input
                    id="edit-phone"
                    value={selectedSalesAgent.phone_number}
                    onChange={(e) => setSelectedSalesAgent(prev => prev ? { ...prev, phone_number: e.target.value } : null)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-email">Email</Label>
                  <Input
                    id="edit-email"
                    type="email"
                    value={selectedSalesAgent.email || ''}
                    onChange={(e) => setSelectedSalesAgent(prev => prev ? { ...prev, email: e.target.value } : null)}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-region">Region</Label>
                  <Select value={selectedSalesAgent.region} onValueChange={(value) => setSelectedSalesAgent(prev => prev ? { ...prev, region: value } : null)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="goma">Goma</SelectItem>
                      <SelectItem value="kinshasa">Kinshasa</SelectItem>
                      <SelectItem value="bukavu">Bukavu</SelectItem>
                      <SelectItem value="urban">Urban Zones</SelectItem>
                      <SelectItem value="rural">Rural Zones</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="edit-commission">Commission Rate (%)</Label>
                  <Input
                    id="edit-commission"
                    type="number"
                    step="0.01"
                    max="1"
                    min="0"
                    value={(selectedSalesAgent.commission_rate * 100).toFixed(2)}
                    onChange={(e) => setSelectedSalesAgent(prev => prev ? { ...prev, commission_rate: Number(e.target.value) / 100 } : null)}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-quota">Target Quota ($)</Label>
                  <Input
                    id="edit-quota"
                    type="number"
                    value={selectedSalesAgent.target_quota}
                    onChange={(e) => setSelectedSalesAgent(prev => prev ? { ...prev, target_quota: Number(e.target.value) } : null)}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-status">Status</Label>
                  <Select value={selectedSalesAgent.status} onValueChange={(value) => setSelectedSalesAgent(prev => prev ? { ...prev, status: value } : null)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="inactive">Inactive</SelectItem>
                      <SelectItem value="suspended">Suspended</SelectItem>
                      <SelectItem value="pending">Pending</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          )}
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>
            <Button onClick={updateSalesAgent}>Update Sales Agent</Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};