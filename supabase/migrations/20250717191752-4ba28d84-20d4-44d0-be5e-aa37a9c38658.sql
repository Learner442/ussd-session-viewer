-- Create sales_agents table (supervisors)
CREATE TABLE public.sales_agents (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    sales_agent_id VARCHAR NOT NULL UNIQUE,
    agent_name VARCHAR NOT NULL,
    phone_number VARCHAR NOT NULL,
    email VARCHAR,
    region VARCHAR NOT NULL,
    department VARCHAR DEFAULT 'Sales',
    role VARCHAR DEFAULT 'Sales Supervisor',
    status public.agent_status DEFAULT 'active',
    initial_budget NUMERIC(12,2) DEFAULT 0.00,
    commission_rate NUMERIC(5,4) DEFAULT 0.05, -- 5% default commission rate
    target_quota NUMERIC(12,2) DEFAULT 100000.00,
    created_by UUID,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Enable RLS on sales_agents
ALTER TABLE public.sales_agents ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for sales_agents
CREATE POLICY "Anyone can view sales agents" ON public.sales_agents FOR SELECT USING (true);
CREATE POLICY "Anyone can create sales agents" ON public.sales_agents FOR INSERT WITH CHECK (true);
CREATE POLICY "Anyone can update sales agents" ON public.sales_agents FOR UPDATE USING (true);

-- Create function to generate sales agent ID
CREATE OR REPLACE FUNCTION public.generate_sales_agent_id()
RETURNS TEXT
LANGUAGE plpgsql
AS $$
DECLARE
  new_id TEXT;
  counter INTEGER := 1;
BEGIN
  LOOP
    new_id := 'SA_' || LPAD(counter::TEXT, 3, '0');
    IF NOT EXISTS (SELECT 1 FROM public.sales_agents WHERE sales_agent_id = new_id) THEN
      RETURN new_id;
    END IF;
    counter := counter + 1;
  END LOOP;
END;
$$;

-- Create trigger to auto-generate sales agent ID
CREATE OR REPLACE FUNCTION public.set_sales_agent_id()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  IF NEW.sales_agent_id IS NULL OR NEW.sales_agent_id = '' THEN
    NEW.sales_agent_id := public.generate_sales_agent_id();
  END IF;
  RETURN NEW;
END;
$$;

CREATE TRIGGER set_sales_agent_id_trigger
  BEFORE INSERT ON public.sales_agents
  FOR EACH ROW
  EXECUTE FUNCTION public.set_sales_agent_id();

-- Create trigger for updated_at
CREATE TRIGGER update_sales_agents_updated_at
  BEFORE UPDATE ON public.sales_agents
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Migrate existing supervisor data to sales_agents table
INSERT INTO public.sales_agents (agent_name, phone_number, region, sales_agent_id)
SELECT DISTINCT 
    supervisor as agent_name,
    '+243000000000' as phone_number, -- Placeholder phone number
    region,
    '' as sales_agent_id -- Will be auto-generated by trigger
FROM public.agents 
WHERE supervisor IS NOT NULL AND supervisor != ''
ON CONFLICT (sales_agent_id) DO NOTHING;